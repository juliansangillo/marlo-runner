name: Unity3D
on:
  push:
    branches:
      - alpha
      - beta
      - master
  workflow_dispatch:
    branches:
      - alpha
env:
  PROJECT_PATH: ./Marlo Runner
  BUILD_NAME: MarloRunner
  RELEASE_NAME: Marlo Runner
jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Create Version
        id: composer
        uses: juliansangillo/version-composer@v1
        with:
          test-branch: beta
          dev-branch: alpha
          test-tag: BETA
          dev-tag: ALPHA

      - name: Write Config
        id: conf
        uses: schdck/create-env-json@v1
        with:
          file-name: unity3d.config
          version: ${{ steps.composer.outputs.version }}
          raw-version: ${{ steps.composer.outputs.raw-version }}
          is-prerelease: ${{ steps.composer.outputs.is-prerelease }}

      - name: Upload Config
        uses: actions/upload-artifact@v2
        with:
          name: unity3d.config
          path: ${{ steps.conf.outputs.full-path }}
  
  build:
    name: Build - ${{ matrix.targetPlatform }} - Unity ver. ${{ matrix.unityVersion }}
    needs: initialize
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2020.1.0f1
        targetPlatform:
          - StandaloneLinux64
          #- StandaloneWindows64
          #- StandaloneWindows
          #- StandaloneOSX
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Download Config
        uses: actions/download-artifact@v2
        with:
          name: unity3d.config

      - name: Get Version
        id: version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: unity3d.config
          property: version

      - name: Cache
        uses: actions/cache@v2
        with:
          path: "${{ env.PROJECT_PATH }}/Library"
          key: "Library-${{ env.PROJECT_PATH }}-${{ matrix.targetPlatform }}"
          restore-keys: |
            "Library-${{ env.PROJECT_PATH }}-"
            Library-

      - name: Build
        uses: webbertakken/unity-builder@v1.2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          buildsPath: bin
          projectPath: "${{ env.PROJECT_PATH }}"
          buildName: "${{ env.BUILD_NAME }}"
          version: ${{ steps.version.outputs.value }}
          versioning: Custom
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.BUILD_NAME }}-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}"
          path: "bin/${{ env.BUILD_NAME }}"

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Download Config
        uses: actions/download-artifact@v2
        with:
          name: unity3d.config

      - name: Get Version
        id: version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: unity3d.config
          property: version

      - name: Get Raw Version
        id: raw-version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: unity3d.config
          property: raw-version

      - name: Get Is Prerelease
        id: is-prerelease
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: unity3d.config
          property: is-prerelease

      - name: Download Builds
        uses: actions/download-artifact@v2
        with:
          name: "${{ env.BUILD_NAME }}*"
          path: bin

      - name: Versioning
        uses: juliansangillo/version-maestro@v1
        #with:
          #version: ${{ steps.version.outputs.value }}

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bin/*.zip
          file_glob: true
          tag: v${{ steps.version.outputs.value }}
          release_name: "${{ env.RELEASE_NAME }} ${{ steps.raw-version.outputs.value }}"
          prerelease: ${{ steps.is-prerelease.outputs.value }}