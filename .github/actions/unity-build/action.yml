name: 'unity-build'
description: 'Builds a Unity player or multiple players from a given Unity project based on the given platform or list of platforms and zips the results into the working directory. 
The results are outputted as three environment variables:
$platform        -  This variable will be set to true if the platform in question was successfully built. For example, if win64 is a platform that was just built, then win64=true. Can be 
                    used to run or skip workflow steps based on whether a particular build was actually performed or not. Will be equal to "" if build was not completed for the platform.
${platform}_bin  -  This will have the relative path to the platforms binary directory where the build artifacts were generated. This is useful for actions like actions/upload-artifact which
                    requires the whole directory as input.
${platform}_name -  This will have the name of the platform build, which can be used as a name in later steps (such as actions/upload-artifact). This will also be the name of the zip file that 
                    was created in the working directory after the build completes (Example: ./YourProjectWin64.zip if platform is win64 and name is YourProjectWin64).'
inputs:
  project-path:
    description: 'Path of Unity project to build'
    required: true
  build-name:
    description: 'A name for the final build. This name is used as the application/executable file name. Should contain no whitespace'
    required: true
  platform:
    description: 'Platform or list of platforms to build for. Current options are: linux64, win64, win32, osx'
    required: true
runs:
  using: composite
  steps:
    - name: Validating Input
      run: |
        if [ -z "${{ inputs.project-path }}" ]; then
          echo "Unity build failed! project-path is required" >&2;
          exit 1
        fi

        if [ -z "${{ inputs.build-name }}" ]; then
          echo "Unity build failed! build-name is required" >&2;
          exit 1
        fi

        if [ -z "${{ inputs.platform }}" ]; then
          echo "Unity build failed! platform is required" >&2;
          exit 1
        fi
      shell: bash

    - name: Building Players
      run: |
        declare -A platforms;
        declare -a commands;
        declare -a friendly_names;
        declare -a short_names;

        platforms=([linux64]=0 [win64]=1 [win32]=2 [osx]=3);
        commands=(buildLinux64Player buildWindows64Player buildWindowsPlayer buildOSXUniversalPlayer);
        friendly_names=('Linux x64' 'Windows x64' 'Windows x86' 'Mac OSX');
        short_names=(Linux64 Win64 Win32 MacOSX);

        while read -r platform; do
          i=${platforms["$platform"]};

          bin="bin/$platform";
          name="${{ inputs.build-name }}${short_names[$i]}";

          if [ -z "$i" ]; then
            echo "Build failed! Unknown platform '$platform'" >&2;
            exit -1
          fi

          echo " ";
          echo "=================================================================";
          echo "Building ${friendly_names[$i]} Player ...";
          echo "=================================================================";

          Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath "${{ inputs.project-path }}" -${commands[$i]} $(pwd)/$bin/${{ inputs.build-name }}/${{ inputs.build-name }};
          cp README.md $bin/${{ inputs.build-name }};
          cp CHANGELOG.md $bin/${{ inputs.build-name }};

          REPO="$(pwd)";
          cd $bin && zip -r $REPO/$name.zip .
          cd "$REPO";

          echo "${friendly_names[$i]} Build Complete.";
          echo " ";

          echo "::set-env name=$platform::true";
          echo "::set-env name=${platform}_bin::$bin";
          echo "::set-env name=${platform}_name::$name";
        done <<< "${{ inputs.platform }}"
      shell: bash